import os
import xml.etree.ElementTree as ET

def get_unique_submodules():
    unique_submodules = set()
    for dir_name, subdir_list, file_list in os.walk('.'):
        if 'pom.xml' in file_list:
            pom_path = os.path.join(dir_name, 'pom.xml')
            tree = ET.parse(pom_path)
            root = tree.getroot()
            artifact_id = root.find('.//{http://maven.apache.org/POM/4.0.0}artifactId')
            if artifact_id is not None:
                unique_submodules.add(artifact_id.text)
    return list(unique_submodules)

def generate_pom_file(modules):
    pom_template = """<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>root-project</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    
    {module_references}
</project>
"""
    module_reference_template = """    <modules>
{module_elements}
    </modules>
"""
    module_element_template = """        <module>{module}</module>"""

    module_references = ""
    for module in modules:
        module_elements = ""
        for sub_module in module:
            module_elements += module_element_template.format(module=sub_module)
        module_references += module_reference_template.format(module_elements=module_elements)

    pom_content = pom_template.format(module_references=module_references)
    with open("pom.xml", "w") as pom_file:
        pom_file.write(pom_content)


# Check if root-level pom.xml file already exists
if os.path.exists("pom.xml"):
    print("Root-level pom.xml file already exists.")
else:
    unique_submodules = get_unique_submodules()
    modules = [unique_submodules]
    
    generate_pom_file(modules)
    print("Root-level pom.xml file created successfully.")
