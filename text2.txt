Install-Module -Name Az -Force

.\Get-AzurePipelines.ps1 -OrganizationName "your_org_name" -ProjectName "your_project_name" -PAT "your_pat"

param (
    [string]$OrganizationName,
    [string]$ProjectName,
    [string]$PAT
)

function Get-AzureDevOpsReleases {
    param (
        [string]$OrganizationName,
        [string]$ProjectName,
        [string]$PAT
    )

    # Convert the Personal Access Token (PAT) to a Base64 encoded string
    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$PAT"))

    # Define the Azure DevOps REST API endpoint to get the releases
    $url = "https://vsrm.dev.azure.com/$OrganizationName/$ProjectName/_apis/release/releases?api-version=6.0"

    # Invoke the REST API to get release data
    $releases = Invoke-RestMethod -Uri $url -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -Method Get

    return $releases.value
}

# Get the releases using the provided parameters
$releases = Get-AzureDevOpsReleases -OrganizationName $OrganizationName -ProjectName $ProjectName -PAT $PAT

# Create an array to store release information
$releaseInfo = @()

# Loop through the releases and extract the name and folder path for those containing "PAT" in their name
foreach ($release in $releases) {
    if ($release.name -like "*PAT*") {
        # Extract the release folder path
        $releaseFolderPath = ($release.releaseDefinition.path -split '\\') -join '/'

        $releaseData = [PSCustomObject]@{
            Name = $release.name
            FolderPath = $releaseFolderPath
        }
        $releaseInfo += $releaseData
    }
}

# Export the filtered release information to a CSV file
$releaseInfo | Export-Csv -Path "AzureDevOpsReleasesInfo_Filtered.csv" -NoTypeInformation

Write-Host "Filtered release information exported to 'AzureDevOpsReleasesInfo_Filtered.csv' successfully."
